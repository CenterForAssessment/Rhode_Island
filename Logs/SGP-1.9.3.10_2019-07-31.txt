
Started updateSGP Wednesday July 31 15:26:14 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:26:15 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:26:15 2019 in 0.092 Seconds 


Started prepareSGP Wednesday July 31 15:26:16 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:26:20 2019 in 4.322 Seconds 


Started abcSGP Wednesday July 31 15:26:20 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:26:20 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:26:22 2019 in 1.899 Seconds 


Started analyzeSGP Wednesday July 31 15:26:22 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:26:22 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:26:31 2019 in 9.012 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:26:31 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:26:40 2019 in 8.776 Seconds

Finished analyzeSGP Wednesday July 31 15:26:48 2019 in 25.729 Seconds 

Started combineSGP Wednesday July 31 15:26:48 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:26:48 2019 in 0.116 Seconds 


Started outputSGP Wednesday July 31 15:26:48 2019: Files produced from outputSGP saved in 'Data'



	outputSGP(
		 sgp_object = sgp_object
		state = state
		output.type = outputSGP.output.type
		outputSGP_SUMMARY.years = years
		outputSGP_SUMMARY.content_areas = content_areas
		outputSGP_INDIVIDUAL.years = years
		outputSGP_INDIVIDUAL.content_areas = content_areas
		outputSGP.student.groups = intersect(names(sgp_object@Data), subset(sgp_object@Names, names.type == "demographic" & names.output == TRUE, select = names.provided, drop = TRUE))
		outputSGP.directory = outputSGP.directory )

	Started LONG data production in outputSGP Wednesday July 31 15:26:48 2019
	Finished LONG data production in outputSGP Wednesday July 31 15:26:57 2019 in 9.123 Seconds 

	Started LONG FINAL YEAR data production in outputSGP Wednesday July 31 15:26:57 2019
	Finished LONG FINAL YEAR data production in outputSGP Wednesday July 31 15:26:57 2019 in 0.482 Seconds 

	Started WIDE data production in outputSGP Wednesday July 31 15:26:57 2019
	Finished WIDE data production in outputSGP Wednesday July 31 15:27:19 2019 in 21.2 Seconds 

Finished outputSGP Wednesday July 31 15:27:19 2019 in 30.815 Seconds 

Finished abcSGP Wednesday July 31 15:27:19 2019 in 58.587 Seconds 

Finished updateSGP Wednesday July 31 15:27:19 2019 in 1 Minute, 4.125 Seconds 


Started updateSGP Wednesday July 31 15:31:42 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:31:42 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:31:42 2019 in 0.029 Seconds 


Started prepareSGP Wednesday July 31 15:31:43 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:31:47 2019 in 4.099 Seconds 


Started abcSGP Wednesday July 31 15:31:47 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:31:47 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:31:49 2019 in 2.089 Seconds 


Started analyzeSGP Wednesday July 31 15:31:49 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:31:49 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:31:58 2019 in 8.816 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:31:58 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:32:08 2019 in 9.496 Seconds

Finished analyzeSGP Wednesday July 31 15:32:16 2019 in 26.642 Seconds 

Started combineSGP Wednesday July 31 15:32:16 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:32:16 2019 in 0.139 Seconds 

Finished abcSGP Wednesday July 31 15:32:16 2019 in 28.885 Seconds 

Finished updateSGP Wednesday July 31 15:32:16 2019 in 33.299 Seconds 


Started updateSGP Wednesday July 31 15:33:17 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:33:17 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:33:17 2019 in 0.026 Seconds 


Started prepareSGP Wednesday July 31 15:33:17 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:33:22 2019 in 4.865 Seconds 


Started abcSGP Wednesday July 31 15:33:22 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:33:22 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:33:24 2019 in 2.151 Seconds 


Started analyzeSGP Wednesday July 31 15:33:24 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:33:25 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:33:34 2019 in 9.245 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:33:34 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:33:43 2019 in 9.253 Seconds

Finished analyzeSGP Wednesday July 31 15:33:51 2019 in 26.535 Seconds 

Started combineSGP Wednesday July 31 15:33:51 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:33:51 2019 in 0.16 Seconds 

Finished abcSGP Wednesday July 31 15:33:51 2019 in 28.864 Seconds 

Finished updateSGP Wednesday July 31 15:33:51 2019 in 34.04 Seconds 


Started updateSGP Wednesday July 31 15:34:50 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:34:50 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:34:50 2019 in 0.028 Seconds 


Started prepareSGP Wednesday July 31 15:34:51 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:34:55 2019 in 4.506 Seconds 


Started abcSGP Wednesday July 31 15:34:55 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:34:55 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:34:57 2019 in 2.194 Seconds 


Started analyzeSGP Wednesday July 31 15:34:57 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:34:58 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:35:06 2019 in 8.848 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:35:06 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:35:16 2019 in 9.307 Seconds

Finished analyzeSGP Wednesday July 31 15:35:24 2019 in 26.562 Seconds 

Started combineSGP Wednesday July 31 15:35:24 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:35:24 2019 in 0.108 Seconds 

Finished abcSGP Wednesday July 31 15:35:24 2019 in 28.879 Seconds 

Finished updateSGP Wednesday July 31 15:35:24 2019 in 33.789 Seconds 


Started updateSGP Wednesday July 31 15:35:51 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:35:51 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:35:51 2019 in 0.029 Seconds 


Started prepareSGP Wednesday July 31 15:35:52 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:35:56 2019 in 4.274 Seconds 


Started abcSGP Wednesday July 31 15:35:56 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:35:56 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:35:58 2019 in 2.082 Seconds 


Started analyzeSGP Wednesday July 31 15:35:58 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:35:58 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:36:08 2019 in 9.473 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:36:08 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:36:17 2019 in 9.546 Seconds

Finished analyzeSGP Wednesday July 31 15:36:26 2019 in 27.651 Seconds 

Started combineSGP Wednesday July 31 15:36:26 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:36:26 2019 in 0.166 Seconds 

Finished abcSGP Wednesday July 31 15:36:26 2019 in 29.913 Seconds 

Finished updateSGP Wednesday July 31 15:36:26 2019 in 34.503 Seconds 


Started updateSGP Wednesday July 31 15:37:03 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:37:03 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:37:03 2019 in 0.026 Seconds 


Started prepareSGP Wednesday July 31 15:37:04 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:37:08 2019 in 4.654 Seconds 


Started abcSGP Wednesday July 31 15:37:08 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:37:08 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:37:11 2019 in 2.105 Seconds 


Started analyzeSGP Wednesday July 31 15:37:11 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:37:11 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:37:20 2019 in 9.013 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:37:20 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:37:29 2019 in 8.875 Seconds

Finished analyzeSGP Wednesday July 31 15:37:37 2019 in 25.982 Seconds 

Started combineSGP Wednesday July 31 15:37:37 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:37:37 2019 in 0.143 Seconds 

Finished abcSGP Wednesday July 31 15:37:37 2019 in 28.278 Seconds 

Finished updateSGP Wednesday July 31 15:37:37 2019 in 33.287 Seconds 


Started updateSGP Wednesday July 31 15:38:07 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:38:07 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:38:07 2019 in 0.03 Seconds 


Started prepareSGP Wednesday July 31 15:38:08 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:38:12 2019 in 4.813 Seconds 


Started abcSGP Wednesday July 31 15:38:12 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:38:12 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:38:15 2019 in 2.217 Seconds 


Started analyzeSGP Wednesday July 31 15:38:15 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:38:15 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:38:24 2019 in 9.431 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:38:24 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:38:35 2019 in 10.814 Seconds

Finished analyzeSGP Wednesday July 31 15:38:43 2019 in 28.245 Seconds 

Started combineSGP Wednesday July 31 15:38:43 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:38:43 2019 in 0.15 Seconds 

Finished abcSGP Wednesday July 31 15:38:43 2019 in 30.63 Seconds 

Finished updateSGP Wednesday July 31 15:38:43 2019 in 35.76 Seconds 


Started updateSGP Wednesday July 31 15:39:09 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:39:09 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:39:09 2019 in 0.03 Seconds 


Started prepareSGP Wednesday July 31 15:39:09 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:39:14 2019 in 5.156 Seconds 


Started abcSGP Wednesday July 31 15:39:14 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:39:14 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:39:17 2019 in 2.309 Seconds 


Started analyzeSGP Wednesday July 31 15:39:17 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:39:17 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:39:26 2019 in 9.348 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:39:26 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:39:36 2019 in 9.975 Seconds

Finished analyzeSGP Wednesday July 31 15:39:45 2019 in 27.752 Seconds 

Started combineSGP Wednesday July 31 15:39:45 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:39:45 2019 in 0.189 Seconds 

Finished abcSGP Wednesday July 31 15:39:45 2019 in 30.269 Seconds 

Finished updateSGP Wednesday July 31 15:39:45 2019 in 35.791 Seconds 


Started updateSGP Wednesday July 31 15:40:32 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:40:32 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:40:32 2019 in 0.03 Seconds 


Started prepareSGP Wednesday July 31 15:40:32 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:40:37 2019 in 4.607 Seconds 


Started abcSGP Wednesday July 31 15:40:37 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:40:37 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:40:39 2019 in 2.482 Seconds 


Started analyzeSGP Wednesday July 31 15:40:39 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:40:39 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:40:48 2019 in 8.874 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:40:48 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:40:57 2019 in 9.092 Seconds

Finished analyzeSGP Wednesday July 31 15:41:05 2019 in 26.081 Seconds 

Started combineSGP Wednesday July 31 15:41:05 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:41:05 2019 in 0.135 Seconds 

Finished abcSGP Wednesday July 31 15:41:05 2019 in 28.714 Seconds 

Finished updateSGP Wednesday July 31 15:41:05 2019 in 33.646 Seconds 


Started updateSGP Wednesday July 31 15:41:30 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:41:30 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:41:30 2019 in 0.026 Seconds 


Started prepareSGP Wednesday July 31 15:41:31 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:41:35 2019 in 4.746 Seconds 


Started abcSGP Wednesday July 31 15:41:35 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:41:35 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:41:38 2019 in 2.102 Seconds 


Started analyzeSGP Wednesday July 31 15:41:38 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:41:38 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:41:47 2019 in 9.002 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:41:47 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:41:56 2019 in 8.832 Seconds

Finished analyzeSGP Wednesday July 31 15:42:03 2019 in 25.77 Seconds 

Started combineSGP Wednesday July 31 15:42:03 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:42:03 2019 in 0.123 Seconds 

Finished abcSGP Wednesday July 31 15:42:03 2019 in 28.01 Seconds 

Finished updateSGP Wednesday July 31 15:42:03 2019 in 33.077 Seconds 


Started updateSGP Wednesday July 31 15:42:25 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:42:25 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:42:25 2019 in 0.024 Seconds 


Started prepareSGP Wednesday July 31 15:42:25 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:42:29 2019 in 4.632 Seconds 


Started abcSGP Wednesday July 31 15:42:29 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:42:30 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:42:32 2019 in 2.08 Seconds 


Started analyzeSGP Wednesday July 31 15:42:32 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:42:32 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:42:41 2019 in 9.146 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:42:41 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:42:50 2019 in 8.961 Seconds

Finished analyzeSGP Wednesday July 31 15:42:58 2019 in 25.978 Seconds 

Started combineSGP Wednesday July 31 15:42:58 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:42:58 2019 in 0.143 Seconds 

Finished abcSGP Wednesday July 31 15:42:58 2019 in 28.217 Seconds 

Finished updateSGP Wednesday July 31 15:42:58 2019 in 33.157 Seconds 


Started updateSGP Wednesday July 31 15:43:25 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:43:25 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:43:25 2019 in 0.026 Seconds 


Started prepareSGP Wednesday July 31 15:43:25 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:43:30 2019 in 4.831 Seconds 


Started abcSGP Wednesday July 31 15:43:30 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:43:30 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:43:32 2019 in 2.079 Seconds 


Started analyzeSGP Wednesday July 31 15:43:32 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:43:32 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:43:41 2019 in 8.847 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:43:41 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:43:50 2019 in 9.045 Seconds

Finished analyzeSGP Wednesday July 31 15:43:58 2019 in 25.868 Seconds 

Started combineSGP Wednesday July 31 15:43:58 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:43:58 2019 in 0.12 Seconds 

Finished abcSGP Wednesday July 31 15:43:58 2019 in 28.084 Seconds 

Finished updateSGP Wednesday July 31 15:43:58 2019 in 33.216 Seconds 


Started updateSGP Wednesday July 31 15:44:24 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:44:24 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:44:24 2019 in 0.032 Seconds 


Started prepareSGP Wednesday July 31 15:44:24 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:44:29 2019 in 4.617 Seconds 


Started abcSGP Wednesday July 31 15:44:29 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:44:29 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:44:31 2019 in 2.152 Seconds 


Started analyzeSGP Wednesday July 31 15:44:31 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:44:31 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:44:40 2019 in 8.743 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:44:40 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:44:49 2019 in 9.252 Seconds

Finished analyzeSGP Wednesday July 31 15:44:57 2019 in 26.05 Seconds 

Started combineSGP Wednesday July 31 15:44:57 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:44:57 2019 in 0.112 Seconds 

Finished abcSGP Wednesday July 31 15:44:57 2019 in 28.33 Seconds 

Finished updateSGP Wednesday July 31 15:44:57 2019 in 33.28 Seconds 


Started updateSGP Wednesday July 31 15:45:20 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:45:20 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:45:20 2019 in 0.029 Seconds 


Started prepareSGP Wednesday July 31 15:45:20 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:45:25 2019 in 4.85 Seconds 


Started abcSGP Wednesday July 31 15:45:25 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:45:25 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:45:27 2019 in 2.122 Seconds 


Started analyzeSGP Wednesday July 31 15:45:27 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:45:28 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:45:36 2019 in 8.844 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:45:36 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:45:45 2019 in 8.79 Seconds

Finished analyzeSGP Wednesday July 31 15:45:53 2019 in 25.809 Seconds 

Started combineSGP Wednesday July 31 15:45:53 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:45:53 2019 in 0.124 Seconds 

Finished abcSGP Wednesday July 31 15:45:53 2019 in 28.068 Seconds 

Finished updateSGP Wednesday July 31 15:45:53 2019 in 33.239 Seconds 


Started updateSGP Wednesday July 31 15:46:24 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:46:24 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:46:24 2019 in 0.034 Seconds 


Started prepareSGP Wednesday July 31 15:46:24 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:46:29 2019 in 4.57 Seconds 


Started abcSGP Wednesday July 31 15:46:29 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:46:29 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:46:31 2019 in 2.135 Seconds 


Started analyzeSGP Wednesday July 31 15:46:31 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:46:31 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:46:40 2019 in 8.803 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:46:40 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:46:49 2019 in 8.852 Seconds

Finished analyzeSGP Wednesday July 31 15:46:56 2019 in 25.596 Seconds 

Started combineSGP Wednesday July 31 15:46:56 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:46:57 2019 in 0.165 Seconds 

Finished abcSGP Wednesday July 31 15:46:57 2019 in 27.911 Seconds 

Finished updateSGP Wednesday July 31 15:46:57 2019 in 32.91 Seconds 


Started updateSGP Wednesday July 31 15:47:26 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:47:27 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:47:27 2019 in 0.029 Seconds 


Started prepareSGP Wednesday July 31 15:47:27 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:47:31 2019 in 4.575 Seconds 


Started abcSGP Wednesday July 31 15:47:31 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:47:31 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:47:34 2019 in 2.1 Seconds 


Started analyzeSGP Wednesday July 31 15:47:34 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:47:34 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:47:43 2019 in 8.938 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:47:43 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:47:52 2019 in 8.823 Seconds

Finished analyzeSGP Wednesday July 31 15:47:59 2019 in 25.955 Seconds 

Started combineSGP Wednesday July 31 15:47:59 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:48:00 2019 in 0.134 Seconds 

Finished abcSGP Wednesday July 31 15:48:00 2019 in 28.203 Seconds 

Finished updateSGP Wednesday July 31 15:48:00 2019 in 33.129 Seconds 


Started updateSGP Wednesday July 31 15:48:22 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:48:22 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:48:22 2019 in 0.026 Seconds 


Started prepareSGP Wednesday July 31 15:48:22 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:48:27 2019 in 4.852 Seconds 


Started abcSGP Wednesday July 31 15:48:27 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:48:27 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:48:29 2019 in 2.126 Seconds 


Started analyzeSGP Wednesday July 31 15:48:29 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:48:30 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:48:40 2019 in 10.585 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:48:40 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:48:50 2019 in 10.005 Seconds

Finished analyzeSGP Wednesday July 31 15:49:00 2019 in 31.207 Seconds 

Started combineSGP Wednesday July 31 15:49:00 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:49:01 2019 in 0.153 Seconds 

Finished abcSGP Wednesday July 31 15:49:01 2019 in 33.5 Seconds 

Finished updateSGP Wednesday July 31 15:49:01 2019 in 38.657 Seconds 


Started updateSGP Wednesday July 31 15:49:27 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:49:27 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:49:27 2019 in 0.036 Seconds 


Started prepareSGP Wednesday July 31 15:49:27 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:49:33 2019 in 5.973 Seconds 


Started abcSGP Wednesday July 31 15:49:33 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:49:33 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:49:37 2019 in 3.586 Seconds 


Started analyzeSGP Wednesday July 31 15:49:37 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:49:37 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:49:50 2019 in 13.193 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:49:51 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:50:02 2019 in 11.355 Seconds

Finished analyzeSGP Wednesday July 31 15:50:12 2019 in 34.768 Seconds 

Started combineSGP Wednesday July 31 15:50:12 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:50:12 2019 in 0.164 Seconds 

Finished abcSGP Wednesday July 31 15:50:12 2019 in 38.541 Seconds 

Finished updateSGP Wednesday July 31 15:50:12 2019 in 44.936 Seconds 


Started updateSGP Wednesday July 31 15:50:32 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:50:32 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:50:32 2019 in 0.036 Seconds 


Started prepareSGP Wednesday July 31 15:50:32 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:50:38 2019 in 5.351 Seconds 


Started abcSGP Wednesday July 31 15:50:38 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:50:38 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:50:40 2019 in 2.505 Seconds 


Started analyzeSGP Wednesday July 31 15:50:40 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:50:41 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:50:51 2019 in 9.999 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:50:51 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:51:01 2019 in 10.409 Seconds

Finished analyzeSGP Wednesday July 31 15:51:11 2019 in 30.252 Seconds 

Started combineSGP Wednesday July 31 15:51:11 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:51:11 2019 in 0.132 Seconds 

Finished abcSGP Wednesday July 31 15:51:11 2019 in 32.907 Seconds 

Finished updateSGP Wednesday July 31 15:51:11 2019 in 38.621 Seconds 


Started updateSGP Wednesday July 31 15:51:39 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:51:39 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:51:39 2019 in 0.042 Seconds 


Started prepareSGP Wednesday July 31 15:51:40 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:51:45 2019 in 5.295 Seconds 


Started abcSGP Wednesday July 31 15:51:45 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:51:45 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:51:48 2019 in 2.54 Seconds 


Started analyzeSGP Wednesday July 31 15:51:48 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:51:48 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:52:00 2019 in 11.56 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:52:00 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:52:10 2019 in 10.456 Seconds

Finished analyzeSGP Wednesday July 31 15:52:19 2019 in 31.491 Seconds 

Started combineSGP Wednesday July 31 15:52:19 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:52:19 2019 in 0.164 Seconds 

Finished abcSGP Wednesday July 31 15:52:19 2019 in 34.213 Seconds 

Finished updateSGP Wednesday July 31 15:52:19 2019 in 39.964 Seconds 


Started updateSGP Wednesday July 31 15:52:49 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:52:49 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:52:49 2019 in 0.038 Seconds 


Started prepareSGP Wednesday July 31 15:52:49 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:52:55 2019 in 5.374 Seconds 


Started abcSGP Wednesday July 31 15:52:55 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:52:55 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:52:57 2019 in 2.481 Seconds 


Started analyzeSGP Wednesday July 31 15:52:57 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:52:58 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:53:08 2019 in 10.691 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:53:08 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:53:19 2019 in 11.129 Seconds

Finished analyzeSGP Wednesday July 31 15:53:29 2019 in 31.706 Seconds 

Started combineSGP Wednesday July 31 15:53:29 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:53:29 2019 in 0.164 Seconds 

Finished abcSGP Wednesday July 31 15:53:29 2019 in 34.369 Seconds 

Finished updateSGP Wednesday July 31 15:53:29 2019 in 40.202 Seconds 


Started updateSGP Wednesday July 31 15:53:59 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:53:59 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:53:59 2019 in 0.035 Seconds 


Started prepareSGP Wednesday July 31 15:54:00 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:54:06 2019 in 6.46 Seconds 


Started abcSGP Wednesday July 31 15:54:06 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:54:06 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:54:09 2019 in 2.551 Seconds 


Started analyzeSGP Wednesday July 31 15:54:09 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:54:09 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:54:19 2019 in 10.311 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:54:19 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:54:29 2019 in 10.186 Seconds

Finished analyzeSGP Wednesday July 31 15:54:38 2019 in 29.813 Seconds 

Started combineSGP Wednesday July 31 15:54:38 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:54:39 2019 in 0.168 Seconds 

Finished abcSGP Wednesday July 31 15:54:39 2019 in 32.552 Seconds 

Finished updateSGP Wednesday July 31 15:54:39 2019 in 39.386 Seconds 


Started updateSGP Wednesday July 31 15:55:44 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:55:44 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:55:44 2019 in 0.038 Seconds 


Started prepareSGP Wednesday July 31 15:55:45 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:55:50 2019 in 5.496 Seconds 


Started abcSGP Wednesday July 31 15:55:50 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:55:50 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:55:53 2019 in 2.548 Seconds 


Started analyzeSGP Wednesday July 31 15:55:53 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:55:53 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:56:04 2019 in 10.724 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:56:04 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:56:14 2019 in 10.189 Seconds

Finished analyzeSGP Wednesday July 31 15:56:23 2019 in 30.437 Seconds 

Started combineSGP Wednesday July 31 15:56:23 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:56:23 2019 in 0.163 Seconds 

Finished abcSGP Wednesday July 31 15:56:23 2019 in 33.167 Seconds 

Finished updateSGP Wednesday July 31 15:56:23 2019 in 39.17 Seconds 


Started updateSGP Wednesday July 31 15:56:52 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:56:52 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:56:52 2019 in 0.036 Seconds 


Started prepareSGP Wednesday July 31 15:56:53 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:56:58 2019 in 5.549 Seconds 


Started abcSGP Wednesday July 31 15:56:58 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:56:58 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:57:01 2019 in 3.219 Seconds 


Started analyzeSGP Wednesday July 31 15:57:01 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:57:02 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:57:14 2019 in 12.146 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:57:14 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:57:25 2019 in 11.342 Seconds

Finished analyzeSGP Wednesday July 31 15:57:35 2019 in 33.228 Seconds 

Started combineSGP Wednesday July 31 15:57:35 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:57:35 2019 in 0.131 Seconds 

Finished abcSGP Wednesday July 31 15:57:35 2019 in 36.596 Seconds 

Finished updateSGP Wednesday July 31 15:57:35 2019 in 42.61 Seconds 


Started updateSGP Wednesday July 31 15:58:07 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:58:07 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:58:07 2019 in 0.03 Seconds 


Started prepareSGP Wednesday July 31 15:58:08 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:58:13 2019 in 5.549 Seconds 


Started abcSGP Wednesday July 31 15:58:13 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:58:13 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:58:16 2019 in 2.456 Seconds 


Started analyzeSGP Wednesday July 31 15:58:16 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:58:16 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:58:26 2019 in 9.986 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:58:26 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:58:38 2019 in 11.68 Seconds

Finished analyzeSGP Wednesday July 31 15:58:47 2019 in 30.957 Seconds 

Started combineSGP Wednesday July 31 15:58:47 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:58:47 2019 in 0.151 Seconds 

Finished abcSGP Wednesday July 31 15:58:47 2019 in 33.582 Seconds 

Finished updateSGP Wednesday July 31 15:58:47 2019 in 39.485 Seconds 


Started updateSGP Wednesday July 31 15:59:14 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 15:59:14 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 15:59:14 2019 in 0.036 Seconds 


Started prepareSGP Wednesday July 31 15:59:14 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 15:59:20 2019 in 5.424 Seconds 


Started abcSGP Wednesday July 31 15:59:20 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 15:59:20 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 15:59:22 2019 in 2.5 Seconds 


Started analyzeSGP Wednesday July 31 15:59:22 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 15:59:23 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 15:59:33 2019 in 10.045 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 15:59:33 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 15:59:43 2019 in 10.472 Seconds

Finished analyzeSGP Wednesday July 31 15:59:52 2019 in 29.558 Seconds 

Started combineSGP Wednesday July 31 15:59:52 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 15:59:52 2019 in 0.163 Seconds 

Finished abcSGP Wednesday July 31 15:59:52 2019 in 32.239 Seconds 

Finished updateSGP Wednesday July 31 15:59:52 2019 in 38.035 Seconds 


Started updateSGP Wednesday July 31 16:00:19 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 16:00:19 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 16:00:19 2019 in 0.032 Seconds 


Started prepareSGP Wednesday July 31 16:00:19 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 16:00:25 2019 in 5.525 Seconds 


Started abcSGP Wednesday July 31 16:00:25 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 16:00:25 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 16:00:27 2019 in 2.391 Seconds 


Started analyzeSGP Wednesday July 31 16:00:27 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 16:00:28 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 16:00:38 2019 in 10.082 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 16:00:38 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 16:00:48 2019 in 10.241 Seconds

Finished analyzeSGP Wednesday July 31 16:00:57 2019 in 29.634 Seconds 

Started combineSGP Wednesday July 31 16:00:57 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 16:00:57 2019 in 0.156 Seconds 

Finished abcSGP Wednesday July 31 16:00:57 2019 in 32.198 Seconds 

Finished updateSGP Wednesday July 31 16:00:57 2019 in 38.078 Seconds 


Started updateSGP Wednesday July 31 16:01:16 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 16:01:16 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 16:01:16 2019 in 0.035 Seconds 


Started prepareSGP Wednesday July 31 16:01:17 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 16:01:22 2019 in 5.329 Seconds 


Started abcSGP Wednesday July 31 16:01:22 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 16:01:22 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 16:01:25 2019 in 2.493 Seconds 


Started analyzeSGP Wednesday July 31 16:01:25 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 16:01:25 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 16:01:35 2019 in 10.144 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 16:01:35 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 16:01:45 2019 in 10.276 Seconds

Finished analyzeSGP Wednesday July 31 16:01:55 2019 in 30.095 Seconds 

Started combineSGP Wednesday July 31 16:01:55 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 16:01:55 2019 in 0.148 Seconds 

Finished abcSGP Wednesday July 31 16:01:55 2019 in 32.755 Seconds 

Finished updateSGP Wednesday July 31 16:01:55 2019 in 38.442 Seconds 


Started updateSGP Wednesday July 31 16:02:18 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 16:02:18 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 16:02:18 2019 in 0.031 Seconds 


Started prepareSGP Wednesday July 31 16:02:18 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 16:02:23 2019 in 5.465 Seconds 


Started abcSGP Wednesday July 31 16:02:23 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 16:02:23 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 16:02:26 2019 in 2.378 Seconds 


Started analyzeSGP Wednesday July 31 16:02:26 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 16:02:26 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 16:02:36 2019 in 10.23 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 16:02:36 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 16:02:47 2019 in 10.434 Seconds

Finished analyzeSGP Wednesday July 31 16:02:55 2019 in 29.675 Seconds 

Started combineSGP Wednesday July 31 16:02:55 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 16:02:56 2019 in 0.164 Seconds 

Finished abcSGP Wednesday July 31 16:02:56 2019 in 32.236 Seconds 

Finished updateSGP Wednesday July 31 16:02:56 2019 in 38.08 Seconds 


Started updateSGP Wednesday July 31 16:03:28 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 16:03:28 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 16:03:28 2019 in 0.032 Seconds 


Started prepareSGP Wednesday July 31 16:03:28 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 16:03:34 2019 in 5.292 Seconds 


Started abcSGP Wednesday July 31 16:03:34 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 16:03:34 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 16:03:36 2019 in 2.511 Seconds 


Started analyzeSGP Wednesday July 31 16:03:36 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 16:03:37 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 16:03:47 2019 in 10.159 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 16:03:47 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 16:03:57 2019 in 9.925 Seconds

Finished analyzeSGP Wednesday July 31 16:04:05 2019 in 29.225 Seconds 

Started combineSGP Wednesday July 31 16:04:05 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 16:04:06 2019 in 0.166 Seconds 

Finished abcSGP Wednesday July 31 16:04:06 2019 in 31.919 Seconds 

Finished updateSGP Wednesday July 31 16:04:06 2019 in 37.576 Seconds 


Started updateSGP Wednesday July 31 16:04:59 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 16:04:59 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 16:04:59 2019 in 0.033 Seconds 


Started prepareSGP Wednesday July 31 16:04:59 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 16:05:04 2019 in 5.278 Seconds 


Started abcSGP Wednesday July 31 16:05:04 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 16:05:04 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 16:05:07 2019 in 2.486 Seconds 


Started analyzeSGP Wednesday July 31 16:05:07 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 16:05:07 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 16:05:17 2019 in 10.09 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 16:05:17 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 16:05:27 2019 in 10.035 Seconds

Finished analyzeSGP Wednesday July 31 16:05:36 2019 in 29.288 Seconds 

Started combineSGP Wednesday July 31 16:05:36 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 16:05:36 2019 in 0.161 Seconds 

Finished abcSGP Wednesday July 31 16:05:36 2019 in 31.953 Seconds 

Finished updateSGP Wednesday July 31 16:05:36 2019 in 37.595 Seconds 


Started updateSGP Wednesday July 31 16:06:27 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 16:06:27 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 16:06:27 2019 in 0.029 Seconds 


Started prepareSGP Wednesday July 31 16:06:28 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 16:06:33 2019 in 5.102 Seconds 


Started abcSGP Wednesday July 31 16:06:33 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 16:06:33 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 16:06:35 2019 in 2.603 Seconds 


Started analyzeSGP Wednesday July 31 16:06:35 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 16:06:36 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 16:06:46 2019 in 10.076 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 16:06:46 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 16:06:56 2019 in 10.08 Seconds

Finished analyzeSGP Wednesday July 31 16:07:05 2019 in 29.642 Seconds 

Started combineSGP Wednesday July 31 16:07:05 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 16:07:05 2019 in 0.142 Seconds 

Finished abcSGP Wednesday July 31 16:07:05 2019 in 32.404 Seconds 

Finished updateSGP Wednesday July 31 16:07:05 2019 in 37.837 Seconds 


Started updateSGP Wednesday July 31 18:51:30 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 18:51:30 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 18:51:30 2019 in 0.044 Seconds 


Started prepareSGP Wednesday July 31 18:51:30 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 18:51:36 2019 in 5.054 Seconds 


Started abcSGP Wednesday July 31 18:51:36 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 18:51:36 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 18:51:38 2019 in 2.229 Seconds 


Started analyzeSGP Wednesday July 31 18:51:38 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 18:51:38 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 18:51:48 2019 in 9.519 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 18:51:48 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 18:51:59 2019 in 11.11 Seconds

Finished analyzeSGP Wednesday July 31 18:52:11 2019 in 33.531 Seconds 

Started combineSGP Wednesday July 31 18:52:11 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 18:52:12 2019 in 0.176 Seconds 

Finished abcSGP Wednesday July 31 18:52:12 2019 in 35.985 Seconds 

Finished updateSGP Wednesday July 31 18:52:12 2019 in 41.371 Seconds 


Started updateSGP Wednesday July 31 18:56:03 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Wednesday July 31 18:56:03 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

Finished prepareSGP Wednesday July 31 18:56:03 2019 in 0.041 Seconds 


Started prepareSGP Wednesday July 31 18:56:03 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Wednesday July 31 18:56:09 2019 in 5.448 Seconds 


Started abcSGP Wednesday July 31 18:56:09 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Wednesday July 31 18:56:09 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Wednesday July 31 18:56:11 2019 in 2.235 Seconds 


Started analyzeSGP Wednesday July 31 18:56:11 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday July 31 18:56:11 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Wednesday July 31 18:56:22 2019 in 10.124 Seconds

	Started studentGrowthPercentiles: Wednesday July 31 18:56:22 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Wednesday July 31 18:56:31 2019 in 9.881 Seconds

Finished analyzeSGP Wednesday July 31 18:56:40 2019 in 28.574 Seconds 

Started combineSGP Wednesday July 31 18:56:40 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Wednesday July 31 18:56:40 2019 in 0.151 Seconds 


Started outputSGP Wednesday July 31 18:56:40 2019: Files produced from outputSGP saved in 'Data'



	outputSGP(
		 sgp_object = sgp_object
		state = state
		output.type = outputSGP.output.type
		outputSGP_SUMMARY.years = years
		outputSGP_SUMMARY.content_areas = content_areas
		outputSGP_INDIVIDUAL.years = years
		outputSGP_INDIVIDUAL.content_areas = content_areas
		outputSGP.student.groups = intersect(names(sgp_object@Data), subset(sgp_object@Names, names.type == "demographic" & names.output == TRUE, select = names.provided, drop = TRUE))
		outputSGP.directory = outputSGP.directory )

	Started LONG data production in outputSGP Wednesday July 31 18:56:40 2019
	Finished LONG data production in outputSGP Wednesday July 31 18:56:50 2019 in 9.591 Seconds 

	Started LONG FINAL YEAR data production in outputSGP Wednesday July 31 18:56:50 2019
	Finished LONG FINAL YEAR data production in outputSGP Wednesday July 31 18:56:50 2019 in 0.551 Seconds 

	Started WIDE data production in outputSGP Wednesday July 31 18:56:50 2019
	Finished WIDE data production in outputSGP Wednesday July 31 18:57:11 2019 in 21.155 Seconds 

Finished outputSGP Wednesday July 31 18:57:11 2019 in 31.309 Seconds 

Finished abcSGP Wednesday July 31 18:57:11 2019 in 1 Minute, 2.285 Seconds 

Finished updateSGP Wednesday July 31 18:57:11 2019 in 1 Minute, 8.174 Seconds 

