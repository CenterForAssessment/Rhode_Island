
Started updateSGP Monday July 22 21:20:04 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		simulate.sgps = FALSE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		outputSGP.output.type = LONG_FINAL_YEAR_Data
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Monday July 22 21:20:04 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

	NOTE: ID in @Data converted from integer to character.
	NOTE: SCALE_SCORE in @Data converted from integer to numeric.
	NOTE: SCALE_SCORE_CSEM in @Data converted from integer to numeric.
Finished prepareSGP Monday July 22 21:20:04 2019 in 0.179 Seconds 


Started prepareSGP Monday July 22 21:20:05 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Monday July 22 21:20:12 2019 in 6.433 Seconds 


Started abcSGP Monday July 22 21:20:12 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Monday July 22 21:20:12 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Monday July 22 21:20:15 2019 in 3.71 Seconds 


Started analyzeSGP Monday July 22 21:20:15 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Monday July 22 21:20:16 2019
		Content Area: MATHEMATICS_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,219)
	Finished studentGrowthPercentiles: Monday July 22 21:20:24 2019 in 7.892 Seconds

	Started studentGrowthPercentiles: Monday July 22 21:20:24 2019
		Content Area: ELA_SAT, Year: 2018_2019, Grade Progression: EOCT, EOCT  (N=9,228)
	Finished studentGrowthPercentiles: Monday July 22 21:20:33 2019 in 9.363 Seconds

Finished analyzeSGP Monday July 22 21:20:44 2019 in 28.23 Seconds 

Started combineSGP Monday July 22 21:20:44 2019
	NOTE: Multiple content areas detected for student growth targets. 'sgp.target.content_areas set to TRUE.
Finished combineSGP Monday July 22 21:20:44 2019 in 0.209 Seconds 


Started outputSGP Monday July 22 21:20:44 2019: Files produced from outputSGP saved in 'Data'



	outputSGP(
		 sgp_object = sgp_object
		state = state
		output.type = outputSGP.output.type
		outputSGP_SUMMARY.years = years
		outputSGP_SUMMARY.content_areas = content_areas
		outputSGP_INDIVIDUAL.years = years
		outputSGP_INDIVIDUAL.content_areas = content_areas
		outputSGP.student.groups = intersect(names(sgp_object@Data), subset(sgp_object@Names, names.type == "demographic" & names.output == TRUE, select = names.provided, drop = TRUE))
		outputSGP.directory = outputSGP.directory )

	Started LONG FINAL YEAR data production in outputSGP Monday July 22 21:20:44 2019
	Finished LONG FINAL YEAR data production in outputSGP Monday July 22 21:20:44 2019 in 0.64 Seconds 

Finished outputSGP Monday July 22 21:20:44 2019 in 0.646 Seconds 

Finished abcSGP Monday July 22 21:20:44 2019 in 32.834 Seconds 

Finished updateSGP Monday July 22 21:20:44 2019 in 40.262 Seconds 

