
Started updateSGP Friday July 26 11:08:24 2019


	updateSGP(
		 what_sgp_object = Rhode_Island_SGP
		with_sgp_data_LONG = Rhode_Island_Data_LONG_2018_2019
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = FALSE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		simulate.sgps = TRUE
		save.intermediate.results = FALSE
		sgp.target.scale.scores = FALSE
		outputSGP.output.type = LONG_FINAL_YEAR_Data
		sgp.config = RI_CONFIG
		sgp.percentiles.equated = FALSE )


Started prepareSGP Friday July 26 11:08:24 2019


	prepareSGP(
		 data = with_sgp_data_LONG
		state = state
		create.additional.variables = FALSE
		fix.duplicates = NULL )

	NOTE: ID in @Data converted from integer to character.
	NOTE: SCALE_SCORE in @Data converted from integer to numeric.
	NOTE: SCALE_SCORE_CSEM in @Data converted from integer to numeric.
Finished prepareSGP Friday July 26 11:08:24 2019 in 0.13 Seconds 


Started prepareSGP Friday July 26 11:08:25 2019


	prepareSGP(
		 data = what_sgp_object
		state = state
		fix.duplicates = fix.duplicates )

	NOTE: Added variable HIGH_NEED_STATUS to @Data.
Finished prepareSGP Friday July 26 11:08:30 2019 in 4.924 Seconds 


Started abcSGP Friday July 26 11:08:30 2019


	abcSGP(
		 sgp_object = what_sgp_object
		state = state
		steps = steps
		years = update.years
		content_areas = update.content_areas
		grades = update.grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.target.scale.scores = sgp.target.scale.scores
		sgp.target.scale.scores.only = sgp.target.scale.scores.only
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		parallel.config = parallel.config
		save.intermediate.results = save.intermediate.results
		save.old.summaries = FALSE
		sgPlot.demo.report = sgPlot.demo.report
		sgp.config = sgp.config
		plot.types = plot.types
		outputSGP.output.type = outputSGP.output.type
		outputSGP.directory = outputSGP.directory
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started prepareSGP Friday July 26 11:08:30 2019


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

Finished prepareSGP Friday July 26 11:08:32 2019 in 2.493 Seconds 


Started analyzeSGP Friday July 26 11:08:32 2019


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

